// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String    @id @default(uuid())
  username          String
  password          String
  hashedPassword    String
  
  email             String    @unique @map("_email")
  emailConfirmed    Boolean   @default(false)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  account_cookie    String    @unique @map("_account_cookie")

  stores            Store[]
  purchases         Purchase[]
  personal          PersonalInformation[]
  cart              Cart[]
  pro               Pro[]

  @@unique([email, account_cookie])
}

model Store {
  id                String    @id @default(uuid())
  ownerId           String    @unique
  storeName         String    @db.Text
  storeDescription  String    @db.Text

  isPublic          Boolean   @default(false)

  owner             Account   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  purchases         Purchase[]
  product           Product[]

  add               StoreAdd[]
}

model CustomProductApi {
  id           String @id @default(uuid())
  storeId      String
  productId    String

  routeToken   String @map("route_token") @unique @default(cuid())
  allowedIps   String @map("allowed_ips")
  cv       String @map("api_token") @unique @default(cuid())
  
  @@index([storeId, productId, allowedIps])
}

model Product {
  id                String   @id @default(uuid())
  storeId           String
  productName       String
  productPrice      Int      @default(0)
  isHidden          Boolean?

  fileContent       String   @db.Text
  fileName          String

  store             Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  purchases         Purchase[]
  productsImage     ProductImage[]
  cart              Cart[]
  add               ProductAdd[]
  
  @@unique([id, productName, productPrice])
}

model Purchase {
  id                String   @id @default(uuid())
  productId         String   @unique
  storeId           String   @unique

  purchasedUserId   String   @db.Text

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product           Product  @relation(fields: [productId], references: [id])
  store             Store    @relation(fields: [storeId], references: [id])
  account           Account  @relation(fields: [purchasedUserId], references: [id])
}

model StoreAdd {
  id          String @id @default(uuid())
  storeId     String @unique
  
  store       Store @relation(fields: [storeId], references: [id])
}

model ProductAdd {
  id          String @id @default(uuid())
  productId   String

  product     Product @relation(fields: [productId], references: [id])
}

model Pro {
  id          String @id @default(uuid())
  userId      String @unique
  proToken    String @unique @default(cuid()) @map("proToken")
  
  monthly     Boolean?
  yearly      Boolean?
  
  subscribedAt DateTime @default(now())
  subsriptionRenwedAt DateTime @updatedAt

  user        Account @relation(fields: [userId], references: [id])

  @@unique([userId, proToken])
}

model Authencation {
  id                String   @id @default(uuid())
  accessToken       String   @default(cuid())
}

model Cart {
  id            String @id @default(uuid())
  userId        String

  productId     String
  price         Int
  name          String

  product       Product @relation(fields: [productId, name, price], references: [id, productName, productPrice])
  user          Account @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id                    String    @id @default(uuid())
  productId             String    @unique

  placeholderImageText  String    

  product               Product @relation(fields: [productId], references: [id])
}

model ContactInformation {
  id                String  @id @default(uuid())
  
  firstName         String
  lastName          String

  phoneNumber       String
}

model PersonalInformation {
  id                String  @id @default(uuid())
  userId            String  @unique

  firstName         String
  lastName          String
  
  creditCardNumber  String  @db.Text @map("credit_card_number")
  creditCardCode    String  @map("credit_card_code")

  user              Account @relation(fields: [userId], references: [id])
}
